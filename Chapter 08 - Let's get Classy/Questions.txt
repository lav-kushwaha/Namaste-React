Chapter 07 - Let Get Classy.

#React Version > 16.4.

Q.What is class Based Components ?
=>Its a normal js class.
#How create class based componet ?
 =>This extends React.Component will make react know this is class based componet.
 =>Class componet have Render(){} method which is return some piece of jsx to display the UI. 
=> ex -
import React from 'react'
class UserClass extends React.Component{
      render(){
          return(
             <div>
                <h2>Hello world</h2>
             <div/>
          ) 
      }
} 
//2nd way to create class by Destructuring React.Component to {Component}
import {Component} from 'react'
class UserClass extends Component{
      render(){
          return(
             <div>
                <h2>Hello World!</h2>
             <div/>
          ) 
      }
} 

Q.What is React.Component ?
=>React.component is basically a class which is given to us by react and UserClass is inheriting some properties on it.

Q.How to receive props in class component?
=>if we have to receive props in class component we used constructor and super(props) keyword in class component.
=>ex-
class UserClass extends from React.Component{
    constructor(props){
        super(props)
        console.log(props)
    }
    render(){
        //Destructuring props object.
        const{name,location} = this.props
        return(
            <h2>Hello world</h2>
            //we are using this keyword to receive props.
            <h2>{name}</h2>
            <h3>{location}</h3>
        )
    }
}

Q.Why do we need super(props) in class component ?
=>By using the super constructor with a props argument, the component is able to inherit the properties of the parent component and also access the new props that have been passed in. 
=>This allows the component to make use of the properties of both the parent component and the new props in its render method.
=>allows accessing this. props in a Constructor function. 
=>In fact, what the super() function does is, calls the constructor of the parent class.


Q.What is this.setState ?
=>this.setState({}) are used to update state variable in class component.
=>this.setState({}) takes object and that object takes a variable which is we have to update.
ex-  <button onClick={()=>this.setState(
            {
                count:this.state.count+1,
            }
        )}>Click Me</button>

Q.What is render () in React?
=>Purpose of render()
=>The purpose of the function is to display the specified HTML-like code inside the specified HTML element.
=>In the render() method, we can read props and state and return our JSX code to the root component of our app.

Q.What is lifecycle method in React?
=>A component's lifecycle has three main phases: 
1.the Mounting Phase,
2.the Updating Phase, and 
3.the Unmounting Phase. 
=>The Mounting Phase begins when a component is first created and inserted into the DOM. 
=>The Updating Phase occurs when a component's state or props change.

Q.What is componentDidMount ?
=>In the React constituent lifecycle, the componentDidMount() method is a crucial parting of the mounting phase. 
=>It is a lifecycle method componentDidMount called automatically by React after the component has been rendered for the first clip and inserted into the DOM.
=>componentDidMount is called when component rendered completely mounted is finished to the browser.
=>componentDidMount is the final step of the mounting process. Using the componentDidMount() method, we can execute the React code when the component has already been placed in the DOM (Document Object Model). 
=>It is used for handling for handling all network requests and setting up subscriptions.
=>First constructor call then render method call at the last componentDidMount is callled.

#Important usecase of componentDidMount.
=>componentDidMount is used to make API call like in functional component we used useEffect hooks.


#What is render phase and commit phase in ReactLifeCycle Method.
1.render phase - constructor, render() => first render phase will called 
2.commit phase - side effects, componentDidMount => Then commit phase will called.
#NOTE :In ReactLifeCycle first - In render phase => constructor and rendered method will called =>Then it will goes to COMMIT PHASE =>Where componentDidMount will called. 

#In Details :-
=>The "render phase" and "commit phase," are terms that relate to React Fiber, which is an internal implementation detail of React for reconciling and rendering updates efficiently.
=>In simple terms, the "render phase" is when React determines what changes need to be made to the virtual DOM, and 
=>the "commit phase" is when those changes are actually applied to the DOM.


Q.Why rendered phase is called first ?
=>When you create a React component, it goes through several lifecycle phases.
=>One of the key phases is the "render" phase. 
=>Here's a simplified overview of the lifecycle phases in React:

#Initialization: The component is set up, and initial values are assigned.

#Mounting:
=>constructor: The component is initialized.
=>render: The component renders for the first time.

#Updating:
=> shouldComponentUpdate (optional): This method is called to determine if the component should re-render.
=> render: If the component should update, it renders again.
=> componentDidUpdate: Called after the component has been updated (re-rendered).

#Unmounting:
componentWillUnmount: Called just before the component is removed from the DOM.

Q.What is react fiber ?
=>React Fiber is an internal update to the React library's core algorithm for rendering components.
=>It introduces a more efficient and incremental approach to updating the virtual DOM, enabling better performance, asynchronous rendering, and improved handling of errors. 
=>It allows React to work on rendering components in smaller chunks, making applications more responsive, especially in complex scenarios.
=>React Fiber is designed to be largely transparent to developers, impacting the internal workings of React for better efficiency and future feature enhancements.

#NOTE : always create a state inside constructor in class component

Q.What is componentDidUpdate in react-lifecycle ?
=> The componentDidUpdate() is called after componentDidMount() and can be useful to perform some action when the state of the component changes.
=> The componentDidUpdate() method is called after the component is updated in the DOM.
=>#What is componentDidUpdate in React?
=> The componentDidUpdate method is one of the lifecycle methods in React that is called after the component has updated. 
=>It is called immediately after the componentâ€™s update has been rendered in the DOM. 
=>The componentDidUpdate method takes two parameters, prevProps and prevState, which are used to access the previous props and state of the component.

Q.What is componentWillUnmount ?
=>componentWillUnmount will be called when component gone from the page.
=>For, example if we go one page to another.
=>The componentWillUnmount() method allows us to execute the React code when the component gets destroyed or unmounted from the DOM
=>The Mounting Phase begins when a component is first created and inserted into the DOM. The Updating Phase occurs when a component's state or props change.
=> And the Unmounting Phase occurs when a component is removed from the DOM.

Q.Disadvanatges of single page ?
=>A single-page app loads a page and then "rewrites" it with new content instead of "loading a new page" for every interaction.
=>For ex - setInterval(()=>{})

#example -//SetInterval With UseEffect.
       useEffect(()=>{
        //This setInterval will not stop if we go one page to another.
        //and if we visit again on this pagae this setInterval will rewrite instead of reload whole page.
       const a= setInterval(()=>{
            console.log("Hello")
        },1000)

    },[])

#Solution :
    //SetInterval With UseEffect.
    useEffect(()=>{
       const a= setInterval(()=>{
            console.log("Hello")
        },1000)
        
        //This function is basically called when we are unmounting the component.
        //Means when we go one page to another then this function will be called.
        return()=>{
           clearInterval(a) 
        }
    },[])

Q.How to fetch API in class component ?
=>By using async componentDidMount()
=>ex -  constructor(){
        super()

        //State Variable.
        this.state = {
            userInfo :{
                name:"default",
                location:"default",
            }
        }
    }
     async componentDidMount(){
        const data = await fetch("https://api.github.com/users/lav-kushwaha");
        const Json = await data.json();

        //this.setState - when this.setState call updating phase will be start.
        //this.setState is used to update state variable.
        this.setState({
            userInfo:Json 
        })
    }
    